.TH YAWS.CONF "5" "" "" "User Commands"
.SH NAME
/etc/yaws/yaws.conf \- Configuration file for the yaws web server
.SH DESCRIPTION
.\" Add any additional description here
.PP
Yaws is fast lightweight web server. It reads a configuration file called
yaws.conf to control its operations. The configuration contains two distinct
parts a global part which affects all the virtual hosts and a server part
where options for each virtual host is supplied.

.SH GLOBAL PART
.TP

\fBlogdir = Directory\fR
All yaws logs will be written to files in this directory. There are several
different log files written by yaws.

.br
\fBreport.log\fR - this is a text file that contains all error logger 
printouts from yaws. 

.br
\fBHost.access\fR - for each virtual host served by yaws, a file Host.access
will be written which contains an access log in Common Log Format.

.br
\fBtrace.http\fR - this file contains the HTTP trace if that is enabled

.br 
\fBauth.log\fR - If configured, all http auth related messages
goes here.

.br
\fBtrace.traffic\fR - this file contains the traffic trace if that is enabled

The default value for logdir is "."

.TP
\fBebin_dir = Directory\fR
This directive adds Directory to the Erlang search path. It is possible to
have several of these command in the configuration file. The default value 
is "yaws_dir"/examples/ebin


.TP
\fBid = String\fR
It is possible run multiple yaws servers on the same machine. We use the
id of a yaws server to control it using the different control commands such
as:
.nf

# /usr/local/bin/yaws --id foobar --stop

.fi
To stop the Yaws server with id "foobar". Each Yaws server will write
its internals data into a file called $HOME/.yaws/yaws/ID where ID the
identity of the server. Yaws also creates a file called
${VARDIR}/run/yaws/ctl-${ID} which contain the port number where the server is
listening for control commands. The default id is "default".

.TP
\fBinclude_dir = Directory\fR
This directive adds Directory to the path of directories where the Erlang
compiler searches for include files. We need to use this if we want to 
include .hrl files in our yaws Erlang code. The default value is 
"yaws_dir"/examples/include.

.TP
\fBmax_num_cached_files = Integer\fR
Yaws will cache small files such as commonly accessed GIF images in RAM.
This directive sets a maximum number on the number of cached files.
The default value is 400.
.TP 
\fBmax_num_cached_bytes = Integer\fR
This directive controls the total amount of RAM which can maximally be
used for cached RAM files. The default value is 1000000, 1 megabyte.
.TP
\fBmax_size_cached_file = Integer\fR
This directive sets a maximum size on the files that are RAM cached by yaws.
The default value i 8000, 8 kBytes.
.TP
\fBcache_refresh_secs = Integer\fR
The RAM cache is used to serve pages that sit in the cache. An entry sits in
cache at most cache_refresh_secs number of seconds. The default is
30. This means that when the content is updated under the docroot,
that change doesn't show until 30 seconds have passed. While
developing a yaws site, it may be convenient to set this value to
0. If the debug flag (-d) is passed to the yaws start script, this
value is automatically set to 0.

.TP
\fBtrace  = false | traffic | http\fR
This enables traffic or http tracing. Tracing is also possible to enable with
a command line flag to yaws. Default is false.

.TP
\fBuse_old_ssl = true | false\fR
This re-enables the old OTP ssl implementation. By default we use the
new ssl implementation. 
 
.TP
\fBauth_log  = true | false\fR
Enable or disable the auth log. Default is true.

.TP
\fBmax_connections = nolimit | Integer\fR
Set this value to control the maximum number of connections
from HTTP clients into the server. This is implemented by closing
the last socket if the limit threshold is reached.

.TP
\fBkeepalive_maxuses = nolimit | Integer\fR
Normally, yaws does not restrict the number of times a connection is
kept alive using keepalive. Setting this parameter to an integer X
will ensure that connections are closed once they have been used X times.
This can be a useful to guard against long running connections 
collecting too much garbage in the Erlang VM.

.TP
\fBprocess_options = "[]" | "[{fullsweep_after, int()} | {min_heap_size, int()}]"\fR
Override the garbage collection option parameters for processes that
handle new connections. Useful for systems that expect long-lived
connections that handle a lot of data. The default value is Erlang's
default which does minimal garbage collection until the process dies.
The value type is a quoted string which contains an Erlang property
list.  See Erlang's \fIerlang:spawn_opt/4\fR function for more details.

.TP
\fBlog_wrap_size = Integer\fR
The logs written by yaws are all wrap logs, the default value at the
size where they wrap around and the original gets renamed to File.old
is 1000000, 1 megabyte. This value can changed.

If we set the value to \fI0\fR the logs will never wrap. If we want to use
Yaws in combination with a more traditional log wrapper such as 
logrotate, set the size to \fI0\fR and Yaws will reopen the logfiles
once they have be renamed/removed.

.TP
\fBlog_resolve_hostname = true | false\fR
By default the client host IP is not resolved in the access logs.


.TP
\fBfail_on_bind_err = true | false\fR
Fail completely or not if yaws fails to bind a listen socket
Default is true.

.TP
\fBenable_soap = true | false\fR
If true, a soap server will be started at startup of Yaws.
Default is false.

.TP
\fBsoap_srv_mods = ListOfModuleSetting\fR
If enable_soap is true, a startup yaws will invoke \fIyaws_soap_srv:setup()\fR
to setup modules set here. 
ModuleSetting is either a triad like \fI<Mod, HandlerFunc, WsdlFile>\fR 
or a quadruple form like \fI<Mod, HandlerFunc, WsdlFile, Prefix>\fR which 
specifies the \fIprefix\fR. A \fIprefix\fR will be used as argument of 
\fIyaws_soap_lib:initModel()\fR and then be used as a XML namespace prefix.
Note, the \fIWsdlFile\fR here should be an absolute-path file 
in local file systems.

For example, we can specify

	soap_srv_mods=<Mod1, HandlerFunc, WsdlFile1><Mod2, HandlerFunc, WsdlFile2, SpecifiedPrefix>...

.TP
\fBphp_exe_path = Path\fR
The name of (and possibly path to) the php executable used to
interpret php scripts (if allowed).  Default is 
\fIphp_exe_path = php-cgi\fR.

.TP
\fBcopy_error_log  = true | false\fR
Enable or disable copying of the error log. When we run in
embedded mode, there may very well be some other systems process
that is responsible for writing the errorlog to a file whereas
when we run in normal standalone mode, we typically want the
Erlang errorlog written to a report.log file.
Default value is true.


.TP
\fBrunmod = ModuleName\fR
At startup yaws will invoke \fIModuleName:start()\fR in a separate
process. It is possible to have several runmods.
This is useful if we want to reuse the yaws startup shell script
for our own application.

.TP
\fBpick_first_virthost_on_nomatch = true | false\fR
When Yaws gets a request, it extracts the Host: header from the
client request to choose a virtual server amongst all servers
with the same IP/Port pair.
This configuration parameter decides whether yaws should pick the
first (as defined in the yaws.conf file) if no name match or not.
In real live hosting scenarios we typically want this to be false
whereas in testing/development scenarios it may be convenient to
set it to true. Default is true.

.TP
\fBkeepalive_timeout = TimeInMilliseconds | infinity\fR
If the HTTP session will be kept alive (i.e., not immediately closed)
it will close after keepalive_timeout milliseconds unless a new
request is received in that time. The default value is 30000. The
value \fIinfinity\fR is legal but not recommended.

.TP
\fBuse_fdsrv = true | false\fR
This feature makes it possible to bind to ports < 1024 even when we're
not running as root. It requires the Jungerl package called fd_server
to be properly installed. The feature doesn't work with SSL. Default
is false.  The use of fdsrv is not encouraged, see
http://yaws.hyber.org/privbind.yaws

.TP
\fBsubconfig = File\fR
Load specified config file.

.TP
\fBsubconfigdir = Directory\fR
Load all config file in specified directory.

.TP
\fBx_forwarded_for_log_proxy_whitelist = ListOfUpstreamProxyServerIps\fR

In case yaws is running behind a http proxy or http load balancer it
may be desirable to configure this proxy to put the ip address of the
originating client into the X-Forwarded-For header and have yaws log
this ip address as the requests source ip address instead of logging
the proxy servers ip address over and over again. This setting allows
to specify for which source ip addresses rewriting in this manner is
attempted.

For example if there are two proxies with the ip addresses 192.168.0.1
and 192.168.0.2 in front of yaws, we can specify:

        x_forwarded_for_log_proxy_whitelist = 192.168.0.1 192.168.0.2

.SH SERVER PART
Yaws can virthost several web servers on the same IP address as well
as several web servers on different IP addresses. This includes SSL servers.
.pp
Each virtual host is defined within a matching pair of \fB<server ServerName>\fR
and \fB</server>\fR. The ServerName will be the name of the webserver.

.pp
The following directives are allowed inside a server definition.
.TP
\fBport = Port\fR
This makes the server listen on Port. Default is 8000.
.TP
\fBlisten = IpAddress\fR
This makes the server listen on IpAddress
When virthosting several servers on the same ip/port address, if the
browser doesn't send a Host: field, yaws will pick the \fIfirst\fR
server specified in the config file.
If the specified ip address is 0.0.0.0 yaws will listen on all local IP
addresses on the specified port. Default is 0.0.0.0.

.TP
\fBlisten_backlog = Integer\fR
This sets the TCP listen backlog for the server to define the maximum
length the queue of pending connections may grow to. The default is
the same as the default provided by \fIgen_tcp:listen/2\fR, which is 5.

.TP
\fBrhost = Host[:Port]\fR
This forces all local redirects issued by the server to go to Host.
This is useful when yaws listens to a port which is different from 
the port that the user connects to. For example, running yaws as a
non-privileged user makes it impossible to listen to port 80, since
that port can only be opened by a privileged user. Instead yaws
listens to a high port number port, 8000, and iptables are used to 
redirect traffic to port 80 to port 8000 (most NAT:ing firewalls 
will also do this for you).
.TP
\fBrscheme = http | https\fR
This forces all local redirects issued by the server to use this 
method. This is useful when an SSL off-loader, or stunnel, is used in 
front of yaws.
.TP

\fBaccess_log = true | false\fR
Setting this directive to false turns of traffic logging for this
virtual server. The default value is true. 

.TP
\fBdir_listings = true | true_nozip | false\fR
Setting this directive to false disallows the automatic
dir listing feature of Yaws. A status code 403 Forbidden will be sent.
Set to true_nozip to avoid the auto-generated all.zip entries. Default is false.

.TP
\fBextra_cgi_vars = .....\fR
Add additional CGI or FastCGI variables. For example:
.nf

<extra_cgi_vars dir='/path/to/some/scripts'>
var = val
...
</extra_cgi_vars>
.fi

.TP
\fBstatistics  = true | false\fR
Turns on/off statistics gathering for a virtual server. Default is false.

.TP
\fBfcgi_app_server = Host:Port\fR
The hostname and TCP port number of a FastCGI application server.
The TCP port number is not optional. There is no default value.

.TP
\fBfcgi_trace_protocol = true | false\fR
Enable or disable tracing of FastCGI protocol messages as info
log messages. Disabled by default.

.TP
\fBfcgi_log_app_error = true | false\fR
Enable or disable logging of application error messages (output
to stderr and non-zero exit value). Disabled by default.

.TP
\fBdeflate = true | false\fR
Turns on or off deflate compression for a server. Default is false.

.TP
\fBdocroot = Directory ...\fR
This makes the server serve all its content from Directory.

It is possible to pass a space-separated list of directories as
docroot. If this is the case, the various directories will be searched in
order for the requested file. This also works with the ssi
and yssi constructs where the full list of directories will be searched
for files to ssi/yssi include.

.TP
\fBauth_skip_docroot = true | false\fR
If true, the docroot will not be searched for \fI.yaws_auth\fR
files. This is useful when the docroot is quite large and the time to
search it is prohibitive when yaws starts up. Defaults to false.

.TP
\fBpartial_post_size = Integer | nolimit\fR
When a yaws file receives large POSTs, the amount of data received
in each chunk is determined by the this parameter.
The default value is 10240.


.TP
\fBdav = true | false\fR
Turns on the DAV protocol for this server. The dav support in yaws is
highly limited. If dav is turned on, .yaws processing of .yaws pages
is turned off. Default is false.  Setting it to nolimit is potentially
dangerous. The socket read timeout is supplied by the
keepalive_timeout setting.  If the read is not done within the
timeout, the POST will fail.

.TP
\fBtilde_expand = true|false\fR
If this value is set to false yaws will never
do tilde expansion. The default is false. tilde_expansion is the
mechanism whereby a URL on the form http://www.foo.com/~username
is changed into a request where the docroot for that
particular request is set to the directory ~username/public_html/
Default is false.

.TP
\fBallowed_scripts = ListOfSuffixes\fR
The allowed script types for this server.  Recognized are `yaws',
`cgi', `fcgi', `php'.  Default is \fIallowed_scripts = yaws php cgi fcgi\fR.

Note: for fcgi scripts, the FastCGI application server is only
called if a local file with the .fcgi extension exists. However,
the contents of the local .fcgi file are ignored.

.TP
\fBtilde_allowed_scripts = ListOfSuffixes\fR
The allowed script types for this server when executing files in
a users public_html folder  Recognized are `yaws',
`cgi', `fcgi', `php'.  Default is \fItilde_allowed_scripts =\fR
i.e. empty


.TP
\fBappmods = ListOfModuleNames\fR
If any the names in ListOfModuleNames appear as components in the
path for a request, the path request parsing will terminate and
that module will be called. There is also an alternate syntax for
specifying the appmods if we don't want our internal erlang module
names to be exposed in the URL paths. 
We can specify

   appmods = <Path1, Module1> <Path2, Modules2> ...

Assume for example that we have
the URL http://www.hyber.org/myapp/foo/bar/baz?user=joe 
while we have the module foo defined as an appmod, the 
function foo:out(Arg) will be invoked
instead of searching the filesystems below the point foo.

The Arg argument will have the missing path part supplied in its
appmoddata field. 

It is also possible to exclude certain directories from appmod
processing. This is particulaly interesting for '/' appmods.
Here is an example:

   appmods = </, myapp exclude_paths icons js top/static>

The above configuration will invoke the 'myapp' erlang module on everything 
except any file found in directories, 'icons', 'js' and 'top/static' 
relative to the docroot.



.TP
\fBerrormod_404 = Module\fR
It is possible to set a special module that handles 404 Not Found messages.

The function \fIModule:out404(Arg, GC, SC)\fR will be invoked. The arguments are

Arg is a #arg{} record

GC is a #gconf{} record (defined in yaws.hrl)

SC is a #sconf{} record (defined in yaws.hrl)

The function can and must do the same things that a normal \fIout/1\fR does.

.TP
\fBerrormod_401 = Module\fR
It is possible to set a special module that handles
401 Unauthorized messages. This can for example be used 
to display a login page instead.

The function \fIModule:out401(Arg)\fR will
be invoked. The arguments are

Arg is a #arg{} record

The function can and must do the same things that a normal \fIout/1\fR does.


.TP
\fBerrormod_crash = Module\fR
It is possible to set a special module that handles
the HTML generation of server crash messages. The default
is to display the entire formated crash message in the
browser. This is good for debugging but not in production.

The function \fIModule:crashmsg(Arg, SC, Str)\fR will be
called. The \fIStr\fR is the real crash message formated as a string.

The function must return, \fI{content,MimeType,Cont}\fR or
\fI{html, Str}\fR or \fI{ehtml, Term}\fR. That data will be shipped
to the client. 

.TP
\fBarg_rewrite_mod = Module\fR
It is possible to install a module that rewrites all the 
Arg #arg{} records at an early stage in the yaws server.
This can be used to do various things such as checking a cookie,
rewriting paths etc.

The module \fIyaws_vdir\fR can be used in case you want to serve static content
that is not located in your docroot. See the example at the bottom of this man 
page for how to use the \fIopaque\fR + \fIvdir\fR elements to instruct the
\fIyaws_vdir\fR module what paths to rewrite.

.TP
\fBstart_mod = Module\fR
Defines a user provided callback module.
At startup of the server, Module:start/1 will be called.
The #sconf{} record (defined in yaws.hrl) will be used
as the input argument. This makes it possible for a user
application to syncronize the startup with the yaws server
as well as getting hold of user specific configuration data,
see the explanation for the <opaque> context.

.TP
\fBrevproxy = Prefix Url\fR
Make yaws a reverse proxy. The Prefix is a path inside our own docroot
and the Url argument is an url pointing to a website we want to "mount"
under the path which is Prefix.

Example: revproxy = /tmp/foo http://yaws.hyber.org

Makes the hyber website appear under /tmp/foo

It is possible to have multiple reverse proxies inside the same server.

WARNING, this feature is yet not in production quality.

.TP
\fBfwdproxy = true|false\fR
Make yaws a forward proxy. By enabling this option you can use yaws
as a proxy for outgoing web traffic, typically by configuring the proxy
settings in a web-browser to explicitly target yaws as its proxy server.

WARNING, this feature is yet not in production quality.

.TP
\fBservername = Name\fR
If we're virthosting everal servers and want to force a server
to match specific Host: headers we can do this with the "servername"
directive. This name doesn't necessarily have to be the same as the
the name inside <server Name> in certain NAT scenarios. Rarely used feature.

.TP
\fBphpfcgi = Host:Port\fR

Use the specified fastcgi server to interpret .php files.  This allows
for faster execution than through the standard CGI interface, because
the PHP interpreter does not have to be restarted for every
request. It also makes it possible to use a separate PHP interpreter
for each <server>, possibly running in different user contexts and
with different memory and CPU restrictions.

Yaws does not start the PHP interpreter in fastcgi mode for you. To
run PHP in fastcgi mode, call it with the -b option. For example:

\fBphp5-cgi -b '127.0.0.1:54321'\fR

This starts a php5 in fastcgi mode listening on the local network
interface. To make use of this PHP server from yaws, specify:

\fBphpfcgi = 127.0.0.1:54321\fR

The PHP interpreter needs read access to the files it is to
serve. Thus, if you run it in a different security context than yaws
itself, make sure it has access to the .php files.

Please note that anyone who is able to connect to the php fastcgi
server directly can use it to read any file to which it has read
access. You should consider this when setting up a system with several
mutually untrusted instances of php.

.TP
\fB<ssl>  .... </ssl>\fR
This begins and ends an SSL configuration for this server.
It's possible to virthost several SSL servers on the same IP
given that they all share the same certificate configuration.
In general it is complicated to virthost several SSL servers on
the same IP address since the certificate is typically
bound to a domainname in the common name part of the certificate.
One solution (the only?) to this problem is to have a certificate
with multiple subjectAltNames. See
http://wiki.cacert.org/VhostTaskForce#Interoperability_Test

.TP
\fBkeyfile = File\fR
Specifies which file contains the private key for the certificate.
If not specified then the certificate file will be used.
.TP
\fBcertfile = File\fR
Specifies which file contains the certificate for the server.
.TP
\fBcacertfile = File\fR
A file containing trusted certificates to use during client authentication 
and to use when attempting to build the server certificate chain. 
The list is also used in the list of acceptable client CAs passed to
the client when a certificate is requested.
.TP
\fBverify = 0 | 1 | 2 | verify_none | verify_peer\fR
Specifies the level of verification the server does on client certs. 
0 means that the server will not ask for a cert (verify_none), 1 means that the
server will ask the client for a cert but not fail if the client does not
supply a client cert (verify_peer, fail_if_no_peer_cert = false), 2 means that
the server requires the client to supply a client cert (verify_peer,
fail_if_no_peer_cert = true).

Setting verify_none means that the x509 validation will be skipped (no
certificate request is sent to the client), verify_peer means that a
certificate request is sent to the client (x509 validation is performed.

You might want to use fail_if_no_peer_cert in combination with verify_peer.
.TP
\fBfail_if_no_peer_cert = true | false\fR
If verify is set to verify_peer and set to true the connection will fail if the
client does not send a certificate (i.e. an empty certificate). If set to false
the server will fail only if an invalid certificate is supplied (an empty
certificate is considered valid).
.TP
\fBdepth = Int\fR
Specifies the depth of certificate chains the server is prepared to follow 
when verifying client certs. For the OTP new ssl implementation it
is also used to specify how far the server, i.e. we, shall follow the
SSL certificates we present to the clients. Hence, using self signed certs,
we typically need to set this to 0.
.TP
\fBpassword = String\fR
String If the private key is encrypted on disc, this password is the 
3Dee key to decrypt it.
.TP
\fBciphers = String\fR
This string specifies the SSL cipher string. The syntax of the SSL cipher 
string is a little horrible sublanguage of its own. It is documented in the 
ssl man page for "ciphers". 
.TP
\fB</ssl>\fR
Ends an SSL definition

.TP
\fB<redirect> ... </redirect>\fR
Defines a redirect mapping. The following items are allowed
within a matching pair of <redirect> and </redirect> delimiters.

We can have a series of

\fBPath = URL\fR or

\fBPath = file\fR

All accesses to Path will be redirected to URL/Path or alternatively
to scheme:host:port/file/Path if a file is used. Note that the original
path is appended to the redirected url. So if we for example have:

.nf
<redirect>
  /foo = http://www.mysite.org/zapp
  /bar = /tomato.html
</redirect>
.fi

Asumming this config resides on a site called http://abc.com, 
We have the following redirects:

http://abc.com/foo -> http://www.mysite.org/zapp/foo

http://abc.com/foo/test -> http://www.mysite.org/zapp/foo/test

http://abc.com/bar -> http://abc.com/bar

http://abc.com/bar/x/y/z -> http://abc.com/bar/x/y/z

Sometimes we do not want to have the original path
appended to the redirected path. To get that behaviour we
specify the config with '==' instead of '='.

<redirect>
  /foo == http://www.mysite.org/zapp
  /bar = /tomato.html
</redirect>

Now a request for http://abc.com/foo/x/y/z simply gets redirected
to http://www.mysite.org/zapp. This is typically used when we simply
want a static redirect at some place in the docroot.

When we specify a file as target for the redirect, the redir will
be to the current http(s) server.


.TP
\fB<auth> ... </auth>\fR
Defines an auth structure. The following items are allowed
within a matching pair of <auth> and </auth> delimiters.

.TP
\fBdir = Dir\fR
Makes Dir to be controlled by WWW-authenticate headers. In order for
a user to have access to WWW-Authenticate controlled directory, the user
must supply a password. The Dir must be specified relative to the docroot.

.TP
\fBrealm = Realm\fR
In the directory defined here, the WWW-Authenticate Realm is set to
this value. 

.TP
\fBauthmod = AuthMod\fR
If an auth module is defined then AuthMod:auth(Arg, Auth) will
be called for all access to the directory. The auth/2 function 
should return one of: true, false, {false, Realm}, {appmod, Mod}.
If {appmod, Mod} is returned then a call to Mod:out(Arg) will
be used to deliver the content.

This can, for example, be used to implement cookie authentication.
The auth() callback would check if a valid cookie header is present,
if not it would return {appmod, ?MODULE} and the out/1 function 
in the same module would return {redirect_local, "/login.html"}.

.TP
\fBuser = User:Password\fR
Inside this directory, the user User has access if the user supplies
the password Password in the popup dialogue presented by the browser.
We can obviously have several of these value inside a single <auth> </auth>
pair.

The usage of User:Password in the actual config file is deprecated
as of release 1.51. It is preferred to have the users in a file called
\fI.yaws_auth\fR in the actual directory. The .yaws_auth file has to be
file parseable by \fIfile:consult/1\fR

Each row of the file must contain terms on the form

.nf
{User, Password}.
.fi

Where both User and Password should be strings.
The .yaws_auth file mechanism is not (yet) recursive. Thus
any subdirectories to Dir are not automatically also protected.

The .yaws_auth file is never visible in a dir listing

.TP
\fBpam service = \fIpam-service\fR\fR
If the item \fBpam\fR is part of the auth structure, 
Yaws will also try to authenticate the user using "pam" using
the pam \fIservice\fR indicated. Usual services are typically found
under /etc/pam.d. Usual values are "system-auth" etc.

pam authentication is performed by an Erlang port program which is
typically installed as suid root by the yaws install script.

.TP
\fB</auth>\fR
Ends an auth definition

.TP
\fB<opaque>  .... </opaque>\fR
This begins and ends an opaque configuration context for this server,
where 'Key = Value' directives can be specified. These directives are
ignored by yaws (hence the name opaque), but can be accessed as a list
of tuples \fI{Key,Value}\fR stored in the #sconf.opaque record entry. See also
the description of the \fIstart_mod\fR directive. 

This mechanism can be used to pass data from a surrounding application
into the individual .yaws pages.




.SH EXAMPLES

The following example defines a single server on port 80.
.nf

logdir = /var/log/yaws
<server www.mydomain.org>
        port = 80
        listen = 192.168.128.31
        docroot = /var/yaws/www
</server>
.fi

.pp
And this example shows a similar setup but two web servers on the same
IP address.

.nf

logdir = /var/log/yaws
<server www.mydomain.org>
        port = 80
        listen = 192.168.128.31
        docroot = /var/yaws/www
</server>

<server www.funky.org>
        port = 80
        listen = 192.168.128.31
        docroot = /var/yaws/www_funky_org
</server>


.fi


.nf
An example with www-authenticate and no access logging at all.

logdir = /var/log/yaws
<server www.mydomain.org>
        port = 80
        listen = 192.168.128.31
        docroot = /var/yaws/www
        access_log = false
        <auth>
            dir = secret/dir1
            realm = foobar
            user = jonny:verysecretpwd
            user = benny:thequestion
            user = ronny:havinganamethatendswithy
       </auth>

</server>





.fi

.nf
An example specifying  a user defined module to be called
at startup, as well as some user specific configuration.
 
<server www.funky.org>
        port = 80
        listen = 192.168.128.31
        docroot = /var/yaws/www_funky_org
        start_mod = btt
        <opaque>
                mydbdir = /tmp
                mylogdir = /tmp/log
        </opaque>
</server>


.fi

An example specifying the GSSAPI/SPNEGO module (authmod_gssapi) to be
used for authentication. This module requires egssapi version 0.1~pre2
or later available at http://www.hem.za.org/egssapi/.

The Kerberos5 keytab is specified as 'keytab = File' directive in
opaque. This keytab should contain the keys of the HTTP service
principal, 'HTTP/www.funky.org' in this example. 

.nf
 
<server www.funky.org>
        port = 80
        listen = 192.168.128.31
        docroot = /var/yaws/www_funky_org
        start_mod = authmod_gssapi
        <auth>
                authmod = authmod_gssapi
                dir = secret/dir1
        </auth>
        <opaque>
                keytab = /etc/yaws/http.keytab
        </opaque>
</server>

.fi



And finally a slightly more complex example
with two servers on the same IP, and one SSL server on a
different IP.

When there are more than one server on the same IP, and they have different
names the server must be able to choose one of them if the client
doesn't send a Host: header. yaws will choose the first one defined in the
conf file.

.nf

logdir = /var/log/yaws
max_num_cached_files = 8000
max_num_cached_bytes = 6000000

<server www.mydomain.org>
        port = 80
        listen = 192.168.128.31
        docroot = /var/yaws/www
</server>



<server www.funky.org>
        port = 80
        listen = 192.168.128.31
        docroot = /var/yaws/www_funky_org
</server>

<server www.funky.org>
        port = 443
        listen = 192.168.128.32
        docroot = /var/yaws/www_funky_org
        <ssl>
           keyfile = /etc/funky.key
           certfile = /etc/funky.cert
           password = gazonk
        </ssl>
</server>


.fi

Finally an example with virtual directories, vdirs.

.nf

<server server.domain>
        port = 80
        listen = 192.168.128.31
        docroot = /var/yaws/www
        arg_rewrite_mod = yaws_vdir
        <opaque>
          vdir = "/virtual1/ /usr/local/somewhere/notrelated/to/main/docroot"
          vdir = "/myapp/ /some/other/path can include/spaces"
          vdir = "/icons/  /usr/local/www/yaws/icons"
        </opaque>
 </server>

.fi

The first defined vdir can then be accessed at or under 
http://server.domain/virtual1/  or http://server.domain/virtual1 
 


.SH AUTHOR
Written by Claes Wikstrom
.SH "SEE ALSO"
.BR yaws (1)
.BR erl (1)

Comment] Local Variables:
Comment] mode: nroff
Comment] End:
