<erl>

out(A) ->
    yaws_api:ssi(A#arg.docroot, ["/HEAD", "/TOPTAB"]).

</erl>



<H2>TODO</H2>

<ul>


<li> Test suites !!!
<li> Http client code/lib
<li> Load and unload configs without disturbing existing sessions.
<li> respect client side Cache-Control: no-cache
<li> clusters, it would be fairly straightforward
to build support for webfarms into yaws. Now it works
ofcource with a normal loadbalancer and mnesia across a set
of nodes, but we could migrate IPs and stuff as well.
<li> TRACE, PUT, OPTIONS ......
<li> more documentation in the www directory
<li> redo the docs completely, docbook ??
<li> more functions in yaws_api
<li> lots of examples, mnesia examples.
<li> do something cool, maybe a streaming audio app
<li> shell access into the daemon .... no bad idea .. ?? Maybe using
distributed erlang to do that.
<li> HTTP trailer support (why ??)
<li> webdav, lots of work.
<li> content negotiation / language support
</ul>



<erl>
out(A) -> yaws_api:ssi(A#arg.docroot, ["/END"]).
</erl>

