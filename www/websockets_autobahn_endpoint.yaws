<erl>
out(A) -> 
    io:format("Spawning websocket owner~n",[]),
    WebSocketOwner = spawn(fun() -> websocket_owner() end),
    {websocket, WebSocketOwner, {active,true}}.

websocket_owner() ->
    receive
	{ok, WebSocket} ->
	    echo_server(WebSocket);
	Any ->
	    io:format("websocket_owner received msg:~p~n", [Any])
    end.

echo_server(WebSocket = {Socket, ProtocolVersion}) ->
    receive
	{tcp, Socket, DataFrame} ->
	    %io:format("Frame: ~p~n", [frame_info(DataFrame)]),
	    {Type, Data} = yaws_api:websocket_unframe_data(ProtocolVersion, DataFrame),
	    handle_message(WebSocket, Type, Data),
            echo_server(WebSocket);
	{tcp_closed, Socket} ->
	    io:format("Websocket closed. Terminating echo_server...~n");
	Any ->
	    io:format("echo_server received msg:~p~n", [Any]),
	    echo_server(WebSocket)
    end.

frame_info(Frame = <<Fin:1,Rsv1:1,Rsv2:1,Rsv3:1,Opcode:4,Masked:1,Len1:7,Rest1/binary>>) ->
    FrameInfo = [{fin, Fin},{rsv1,Rsv1},{rsv2,Rsv2},{rsv3,Rsv3},{opcode,Opcode},{masked,Masked},{len1,Len1}].

handle_message(WebSocket, text, Data) ->
    CharCount = length(binary_to_list(Data)),
    io:format("Text Chars Count = ~p~n", [CharCount]),
    if
	CharCount < 1000 ->
	    io:format("Got data from Websocket: ~p~n", [Data]);
	true ->
	    io:format("Too many chars to print easily...~n",[])
    end,

    yaws_api:websocket_send(WebSocket, {text, Data}), 
    ok;

handle_message(WebSocket, binary, Data) ->
    yaws_api:websocket_send(WebSocket, {binary, Data}), 
    ok;

handle_message(WebSocket, ping, Data) ->
    yaws_api:websocket_send(WebSocket, {pong, Data}),
    ok.
</erl>
